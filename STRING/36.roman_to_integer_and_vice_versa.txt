1. Roman to Integer  :- 

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

Time Complexity:
The time complexity of this code is O(n), where n is the length of the input string s. The code iterates through the string once, and each iteration involves constant time operations.

Space Complexity:
The space complexity is O(1) or constant space. The code uses a fixed-size map object (map) to store the Roman numeral to numeric value mapping. Regardless of the input size, the space used by the map remains constant.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Integer to Roman :

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

Example 1:

Input: num = 3
Output: "III"
Explanation: 3 is represented as 3 ones.
Example 2:

Input: num = 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
Example 3:

Input: num = 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.

==================================================================================================================================================================================
//ROMAN TO INTEGER:-

//https://www.youtube.com/watch?v=Ydho2JPTI3Y

s = "LVIII"; //58
//s = "MCMXCIV"//1994
const map = { I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000 };
let num = 0;
//logic - we write 4 as IV= 1-5 =-1+5=4 (if smaller value comes first , subtract it from the sum,)
// and 6 as VI =5+1=6//(if smaller value comes second , add it into the  sum)
for (let i = 0; i < s.length; i++) {
    const curr = map[s[i]];
    const next = map[s[i + 1]];
    if (next !== undefined && curr < next) {//here the curr which is first value is smaller than then next value
        num = num - curr;
    } else {
        num = num + curr;
    }
}
console.log(num);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////INTEGER TO ROMAN :

function intToRoman1(num) {
    let sb = [];
    //https://www.youtube.com/watch?v=Ss27oAfuPf4

    // major , minor , middle
    process(sb, "*", 'M', '*', Math.floor(num / 1000));// no major and middle element , as it is beyond the constraints.
    num = num % 1000;

    process(sb, "M", 'C', 'D', Math.floor(num / 100));
    num = num % 100;

    process(sb, "C", 'X', 'L', Math.floor(num / 10));
    num = num % 10;

    process(sb, "X", 'I', 'V', num / 1);
    num = num % 1;

    return sb.join('');
}

function process(sb, major, minor, middle, val) {
    if (val <= 3) {
        for (let i = 1; i <= val; i++) {
            sb.push(minor);
        }
    } else if (val === 4) {
        sb.push(minor);
        sb.push(middle);
    } else if (val === 5) {
        sb.push(middle);
    } else if (val <= 8) {
        sb.push(middle);
        for (let i = 6; i <= val; i++) {
            sb.push(minor);
        }
    } else if (val === 9) {
        sb.push(minor);
        sb.push(major);
    }
}

let num = 1994
//Output: "MCMXCIV"
let ans = intToRoman1(num)
console.log(ans)//MCMXCIV

