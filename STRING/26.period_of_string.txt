Problem Description :

You are given a string A of length N consisting of lowercase alphabets. Find the period of the string.

Period of the string is the minimum value of k (k >= 1), that satisfies A[i] = A[i % k] for all valid i.



Problem Constraints:-
1 <= N <= 10^6

Input Format:-
First and only argument is a string A of length N.

Output Format
Return an integer, denoting the period of the string.

Example Input
Input 1:

 A = "abababab"
Input 2:

 A = "aaaa"


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 Period of the string will be 2: 
 Since, for all i, A[i] = A[i%2]. 
Explanation 2:

 Period of the string will be 1.

 ==============================================================================================================================================================================================================================
solution approach :-
------------------------

A simple approach is to check for all values of K from 1 to n-1, but this will take O(N2).

We can do this in linear time using a pattern matching algorithm (Z algorithm).

First, we will construct the Z array, i.e., for a string str[0..n-1], Z array is of the same length as a string. An element Z[i] of the Z array stores length of the longest substring starting from str[i], which is also a prefix of str[0..n-1]. The first entry of the Z array is meaningless as the complete string is always a prefix of itself.

This can be used, for any i (1 <= i < n), if i + Z[i] == N , then the period of the string is i.

If there is no such period, then N will be the period.

================================================================================================================================================================================================================================




function computeLPS(txt) {
    ////https://www.youtube.com/watch?v=__Cu92rei1s
    let n = txt.length;
    let LPS = [];
    LPS[0] = 0;
    for (let i = 1; i < n; i++) {
        let x = LPS[i - 1];
        while (txt[i] != txt[x]) {
            if (x == 0) {
                x = -1;
                break;
            }
            x = LPS[x - 1];
        }
        LPS[i] = x + 1;
    }
    return LPS;
}

//Period of the string is the minimum value of k (k >= 1), that satisfies A[i] = A[i % k] for all valid i.
function findPeriod(A) {
    const n = A.length;
    const lps = computeLPS(A);
    const period = n - lps[n - 1];
    //Once the LPS array is computed, the period of the string is calculated in the findPeriod function. The period k is given by the formula period = n - lps[n - 1], where n is the length of the string and lps[n - 1] is the last element of the LPS array.
    //The reason for using this formula is that if lps[n - 1] is non-zero, it means there is a repeating pattern in the string. Subtracting it from the length gives the length of the shortest repeating pattern (k), which satisfies A[i] = A[i % k] for all valid i.
    return period;
}

// Example usage:
console.log(findPeriod("abababab")); // Output: 2
console.log(findPeriod("aaaa")); // Output: 1