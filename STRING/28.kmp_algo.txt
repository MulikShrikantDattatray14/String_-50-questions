

function computeLPS(txt) {
    // logic :- st[i]==st[lps[i-1]];lps[i]=lps[i-1]+1;
    let n = txt.length;
    let LPS = [];
    LPS[0] = 0;
    for (let i = 1; i < n; i++) {
        let x = LPS[i - 1];
        while (txt[i] !== txt[x]) {
            // search backwards
            if (x === 0) {
                x = -1;
                break;
            }
            x = LPS[x - 1];// take x backwards
        }
        LPS[i] = x + 1;
    }
    return LPS;
}

function kmpSearch(pattern, text) {
    let m = pattern.length;
    let n = text.length;
    let lps = computeLPS(pattern);

    let i = 0;
    let j = 0;

    while (i < n) {
        if (pattern[j] === text[i]) {
            i++;
            j++;
        }

        if (j === m) {
            console.log("Pattern found at index", i - j);
            // console.log(lps[j - 1])
            j = lps[j - 1];
        } else if (i < n && pattern[j] !== text[i]) {
            if (j !== 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
}

// Example usage:
let text = "ABABDABACDABABCABAB";
let pattern = "ABAB";

(kmpSearch(pattern, text))