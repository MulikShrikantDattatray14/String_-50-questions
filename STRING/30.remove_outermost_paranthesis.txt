A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".
===============================================================================================================================================================================
solution approach :-

The code defines a function removeOuterParentheses that takes a string s containing parentheses and removes the outermost parentheses of each primitive sub-expression. It uses a counter count to keep track of the nesting level.

The logic iterates through each character in the input string. If the character is an opening parenthesis "(", it checks if the current nesting level (count) is greater than 0. If so, it adds the opening parenthesis to the result string and increments the nesting level. If the character is a closing parenthesis ")", it decrements the nesting level and adds the closing parenthesis to the result only if the nesting level is still greater than 0.

In summary, the function removes the outermost parentheses of each primitive sub-expression in the input string. The example usage with the string "(()())(())(()(()))" would produce the result "()()()()(()())".

================================================================================================================

//https://www.youtube.com/watch?v=MLfAFCkzChU&t=11s
function removeOuterParentheses(s) {
    let result = "";
    let count = 0;
    for (let i = 0; i < s.length; i++) {
        let ch = s.charAt(i);
        if (ch === "(") {
            if (count > 0) {
                result += ch;
            }
            count++;
        } else {
            count--;
            if (count > 0) {
                result += ch;
            }
        }

    }
    return result;
}

// Example usage:
//let inputString = "(()())(())";
let inputString = "(()())(())(()(()))";
let result = removeOuterParentheses(inputString);
console.log(result);

================================================================================================================================================================================================================================