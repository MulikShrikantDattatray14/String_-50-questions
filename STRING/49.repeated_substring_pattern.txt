https://leetcode.com/problems/repeated-substring-pattern/description/

Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

Example 1:

Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.
Example 2:

Input: s = "aba"
Output: false
Example 3:

Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.

=====================================================================================================================================================================
logic : 
You can solve this problem using the Knuth-Morris-Pratt (KMP) algorithm to find the longest proper prefix which is also a suffix of the string. If the length of this prefix-suffix is not the length of the string itself, then it can be constructed by taking a substring and appending multiple copies of it together. Here's the JavaScript implementation:

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
function computeLPS(txt) {
  ////https://www.youtube.com/watch?v=__Cu92rei1s
  let n = txt.length;
  let LPS = [];
  LPS[0] = 0;
  for (let i = 1; i < n; i++) {
    let x = LPS[i - 1];

    while (txt[i] != txt[x]) {
      if (x == 0) {
        x = -1;
        break;
      }

      x = LPS[x - 1];
    }

    LPS[i] = x + 1;
  }

  return LPS;
}

function canConstructSubstring(s) {
  const n = s.length;
  const lps = computeLPS(s);

  const len = lps[n - 1];
  return len > 0 && n % (n - len) === 0;
}

console.log(canConstructSubstring("abab")); // Output: true
console.log("==============================================");

console.log(canConstructSubstring("aba")); // Output: false
console.log("==============================================");

console.log(canConstructSubstring("abcabcabcabc")); // Output: true



======================================================================================================================================================================
 